package main

import "fmt"

// 所有的位运算都是建立在二进制的基础上
func main() {
	bitwise_1()
	fmt.Println("-----")
	bitwise_2()
	fmt.Println("-----")
	bitwise_3()
}

func bitwise_1() {
	// &
	//12  0000 1100
	//60  0011 1100
	//&   0000 1100 ==> 12
	 a := 12 & 60
	fmt.Printf("%d, 二进制%b\n",12 & 60,a)
	// |
	//12  0000 1100
	//60  0011 1100
	//|   0011 1100 ==> 60
	fmt.Printf("%d, 二进制%b\n",12 | 60,(12 | 60))
}
func bitwise_2() {
	// 按位异或,相同为0,不同为1
	// ^
	//12  0000 1100
	//60  0011 1100
	//^   0011 0000 ==> 48
	fmt.Printf("%d, 二进制%b\n",12 ^ 60,(12 ^ 60))

	// 位清空，a&^b,对于b上的每个数值，如果为0，则取a对应位上的数值，如果为1，则取0.
	// &^
	//12  0000 1100
	//60  0011 1100
	//&^  0000 0000 ==> 0
	//置换 0011 0000 ==> 48
	fmt.Printf("%d, 二进制%b\n",12 &^ 60,(12 &^ 60))
	fmt.Printf("%d, 二进制%b\n",60 &^ 12,(60 &^ 12))
}

func bitwise_3() {
	// 左移 << 2
	//12   0000 1100
	//<<2  0011 0000 ==> 48
	//60   0011 1100
	//<<2  1111 0000 ==> 240
	fmt.Printf("%d, 二进制%b\n",12 << 2,(12 << 2 ))
	fmt.Printf("%d, 二进制%b\n",60 << 2,(60 << 2))
	// 右移 >>2
	//12   0000 1100
	//>>2  0000 0011 ==> 3
	//60   0011 1100
	//>>2  0000 1111 ==> 15
	fmt.Printf("%d, 二进制%b\n",12 >> 2,(12 >> 2 ))
	fmt.Printf("%d, 二进制%b\n",60 >> 2,(60 >> 2))
}